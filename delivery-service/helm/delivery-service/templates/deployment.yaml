apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: {{ include "helm.chart" . }}
    app: {{ include "helm.name" . }}
    app.kubernetes.io/name: {{ include "helm.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  name: {{ include "helm.name" . }}
spec:
  selector:
    matchLabels:
      app: {{ include "helm.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "helm.name" . }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8086"

    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      containers:
        - name: {{ include "helm.name" . }}
          image: "{{ .Values.deployment.image.name }}:{{ .Values.deployment.image.tag }}"
          {{- if .Values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
            runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
            readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
          {{- end }}
          imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
          ports:
            - containerPort: {{ .Values.service.targetPort }}
          envFrom:
            - configMapRef:
                name: {{ include "helm.name" . }}
          env:
            - name: JAVA_OPTS
              value: {{ .Values.env.javaOpts }}
            - name: GCP_SVC_ACCOUNT_ENCODED_KEY
              value: {{ .Values.pubsubSvcAccount.key }}

          livenessProbe:
            initialDelaySeconds: {{ .Values.deployment.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.deployment.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.deployment.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.deployment.livenessProbe.timeoutSeconds }}
            httpGet:
              path: {{ .Values.deployment.livenessProbe.endpoint }}
              port: {{ .Values.deployment.livenessProbe.port}}
          readinessProbe:
            initialDelaySeconds: {{ .Values.deployment.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.deployment.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.deployment.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.deployment.readinessProbe.timeoutSeconds }}
            httpGet:
              path: {{ .Values.deployment.readinessProbe.endpoint }}
              port: {{ .Values.deployment.readinessProbe.port }}
          resources:
{{ toYaml .Values.deployment.resources | indent 12 }}
      volumes:
        - name: "tmp-volume"
          emptyDir: {}
      terminationGracePeriodSeconds: {{ .Values.deployment.terminationGracePeriodSeconds }}
